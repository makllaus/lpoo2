/*
 -- create sequence agendaseq start with 1;

create table agenda (
id int not null default next value for agendaseq,
nome varchar(100) not null,
telefone varchar(50) not null,
 primary key (id)
)


 */
package br.ufpr.tads.agenda;

import br.ufpr.tads.agenda.db.Conexao;
import br.ufpr.tads.agenda.db.DAOFactory;
import br.ufpr.tads.agenda.db.dao.AgendaDAO;
import br.ufpr.tads.agenda.db.vo.AgendaVO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Dieval
 */
public class AgendaFrame extends javax.swing.JFrame implements ActionListener {

    private Conexao conexao = null;
    private List<AgendaVO> agendaList = new ArrayList<AgendaVO>();
    private List<AgendaVO> cacheList = agendaList;
    private int index = -1;

    /**
     * Creates new form AgendaFrame
     */
    public AgendaFrame() {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AgendaFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(AgendaFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(AgendaFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AgendaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();

        conexao = Conexao.getInstance();
        java.sql.Connection con = conexao.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Sem conexão com o banco");
            System.exit(0);
        }
        carregaPrimeiroRegistro();

        addButton.addActionListener(this);
        searchButton.addActionListener(this);
        delButton.addActionListener(this);
        saveButton.addActionListener(this);
        priorButton.addActionListener(this);
        nextButton.addActionListener(this);
        atualizarButton.addActionListener(this);

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nomeTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        telefoneTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        priorButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        atualizarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agenda");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Nome");

        jLabel2.setText("Telefone");

        addButton.setText("Novo");
        addButton.setActionCommand("novo");

        searchButton.setText("Buscar");
        searchButton.setActionCommand("busca");

        delButton.setText("Excluir");
        delButton.setActionCommand("del");

        saveButton.setText("Salvar");
        saveButton.setActionCommand("salvar");

        priorButton.setText("Anterior");
        priorButton.setActionCommand("anterior");

        nextButton.setText("Próximo");
        nextButton.setActionCommand("proximo");

        idLabel.setText("jLabel3");

        messageLabel.setText(" ");

        atualizarButton.setText("Atualizar");
        atualizarButton.setActionCommand("atualizar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nomeTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(messageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(telefoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(delButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(priorButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nextButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(atualizarButton)))
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(telefoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(messageLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton)
                        .addComponent(searchButton)
                        .addComponent(delButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saveButton)
                        .addComponent(priorButton)
                        .addComponent(nextButton)
                        .addComponent(atualizarButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (conexao != null) {
            conexao.close();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendaFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton atualizarButton;
    private javax.swing.JButton delButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextField nomeTextField;
    private javax.swing.JButton priorButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField telefoneTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        messageLabel.setText(" ");

        if ("novo".equals(cmd)) {
            index = -1;
            nomeTextField.setText("");
            telefoneTextField.setText("");

        } else if ("busca".equals(cmd)) {
            buscaReg();

        } else if ("del".equals(cmd)) {
            removeReg();

        } else if ("salvar".equals(cmd)) {
            saveReg();

        } else if ("anterior".equals(cmd)) {
            anteriorReg();

        } else if ("proximo".equals(cmd)) {
            proximoReg();
            
        } else if ("atualizar".equals(cmd)) {
            int old = index;
            if( agendaList != cacheList ) {
                agendaList = cacheList;
            }
            carregaPrimeiroRegistro();
            index = agendaList.size() > old ? old : 0;
            atualizaTela(this.index);
        }

        if (index > 0) {
            AgendaVO vo = agendaList.get(index);
            idLabel.setText(String.format("%d", vo.getID()));
        } else {
            idLabel.setText("-1");
        }

    }

    private void atualizaTela(int idx) {
        AgendaVO vo;
        if (idx < agendaList.size() && agendaList.size()>0) {
            vo = agendaList.get(idx);
        } else {
            vo = new AgendaVO();
        }
        nomeTextField.setText(vo.getNome());
        telefoneTextField.setText(vo.getTelefone());
        idLabel.setText(String.format("%d", vo.getID()));
    }

    private void carregaPrimeiroRegistro() {
        AgendaDAO dao = DAOFactory.getInstance().getAgendaDAO();
        List<AgendaVO> regs = dao.findEntities();
        if (regs != null) {
            this.agendaList.clear();
            this.agendaList.addAll(regs);
            if (agendaList.size() > 0) {
                this.index = 0;
                atualizaTela(this.index);
            }
        }
    }

    private void anteriorReg() {
        if (this.index > 1) {
            this.index--;
            atualizaTela(this.index);
        } else {
            messageLabel.setText("Encontra-se no primeiro registro.");
        }
    }

    private void proximoReg() {
        if (this.index < agendaList.size() - 1) {
            this.index++;
            atualizaTela(this.index);
        } else {
            messageLabel.setText("Encontra-se no último registro.");
        }
    }

    private void buscaReg() {
        String nome = nomeTextField.getText().trim();
        String fone = telefoneTextField.getText().trim();

        boolean buscaPorNome = nome.length() > 0;
        
        if (buscaPorNome) {
            AgendaDAO dao = DAOFactory.getInstance().getAgendaDAO();
            List<AgendaVO> lista = dao.findByName(nome);
            if( lista != null && lista.size() > 0 ) {
                if( lista.size() == 1 ) {
                    AgendaVO achado = lista.get(0);
                    index = -1; 
                    for(int i=0 ; i<agendaList.size() ; i++ ) {
                        if( agendaList.get(i).getID() == achado.getID() ) {
                            index = i;
                            break;
                        }
                    }
                } else {
                    agendaList = lista;
                    index = 0;
                }
                atualizaTela(index);
                messageLabel.setText(String.format("%s encontrado em %d registros.",nome,lista.size()) );
            } else {
                messageLabel.setText("Busca não encontrada.");
            }
        }
    }

    private void removeReg() {
        if (index > -1) {
            AgendaVO vo = agendaList.get(index);
            if (vo.getID() > -1) {
                AgendaDAO dao = DAOFactory.getInstance().getAgendaDAO();
                dao.destroy(vo.getID());
                messageLabel.setText(String.format("Agenda %s (%s) removida.", vo.getNome(), vo.getTelefone()));
                agendaList.remove(vo);
                index = agendaList.size()>0 ? 0 : -1;
                atualizaTela(index);
            }
        }
    }

    private void saveReg() {
        String nome = nomeTextField.getText().trim();
        String fone = telefoneTextField.getText().trim();
        AgendaDAO dao = DAOFactory.getInstance().getAgendaDAO();
        AgendaVO vo = index > -1 ? agendaList.get(index) : new AgendaVO();
        vo.setNome(nome);
        vo.setTelefone(fone);
        if (index > -1) {
            dao.edit(vo);
        } else {
            dao.create(vo);
            idLabel.setText(String.format("%d", vo.getID()));
            agendaList.add(vo);
            Collections.sort(agendaList, new java.util.Comparator<AgendaVO>() {
                @Override
                public int compare(AgendaVO o1, AgendaVO o2) {
                    return o1.getNome().compareTo(o2.getNome());
                }
            });
            index = agendaList.indexOf(vo);
            atualizaTela(index);
        }
    }

}
